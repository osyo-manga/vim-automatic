*automatic.txt*		自動的にウィンドウの設定を行う

==============================================================================
目次						*automatic-contents*

概要				|automatic-introduction|
使い方				|automatic-usage|
設定				|automatic-setting|
  変数				  |automatic-variables|
  マッチ			  |automatic-config-match|
  セット			  |automatic-config-set|


==============================================================================
概要						*automatic-introduction*

*automatic* は任意のタイミングでウィンドウに対する設定を行うプラグインです。
デフォルトでは以下の条件の場合に設定が行われます

- |BufWinEnter| が呼ばれた時
- タブページ内にウィンドウが2つ以上開かれている

上記の条件は |automatic-config-match| によって制御する事ができます。


Requirement:
	gift.vim - https://github.com/osyo-manga/vim-gift
	Vim version 7.3.895 以上


==============================================================================
使い方						*automatic-usage*

|g:automatic_config| に設定を記述して使用します。
設定方法は |automatic-config| を参照してください。


==============================================================================
設定						*automatic-setting*

------------------------------------------------------------------------------
変数						*automatic-variables*

g:automatic_config				*g:automatic_config*
	"match" と "set" のキーを保持した辞書のリストになります。
	マッチング方法やウィンドウに対する設定をこの変数に記述して使用します。

g:automatic_default_match_config		*g:automatic_default_match_config*
	|g:automatic_config| に設定する "match" のデフォルト値です。
	|automatic-config-match| の値を保持した辞書です。
	|g:automatic_default_match_config| よりも |g:automatic_config| の値が
	優先して使用されます。

g:automatic_default_set_config			*g:automatic_default_set_config*
	|g:automatic_config| に設定する "set" のデフォルト値です。
	|automatic-config-set| の値を保持した辞書です。
	|g:automatic_default_set_config| よりも |g:automatic_config| の値が
	優先して使用されます。

g:automatic_match_presets			*g:automatic_match_presets*
	|automatic#get_match_preset()| の設定をユーザ側で拡張するための変数で
	す。
	これは次のように拡張する事ができます。
Example: >
	" GUI で起動した場合のマッチ方法
	let s:default_match_presets = {
	\	"gvim_started" : {
	\		"autocmds" : ["GUIEnter"],
	\		"is_open_other_window" : 1
	\	}
	\}

	" GUI で起動した場合にウィンドウ位置やサイズを設定する
	let g:automatic_config = [
	\	{
	\		"match" : "gvim_started",
	\		"set" : {
	\			"lines" : 50,
	\			"columes" : 150,
	\			"winpos_x" : 100,
	\			"winpos_y" : 50,
	\		},
	\	},
	\]
<


==============================================================================
インターフェース				*automatic-interface*

------------------------------------------------------------------------------
関数						*automatic-functions*

					*automatic#close_window_for_tag()*
automatic#close_window_for_tag({tag})
	{tag} が設定されているすべてのウィンドウを閉じます。
	{tag} は |automatic-setter-tags| でウィンドウに対して設定を行うことが
	できます。
	ウィンドウを閉じるコマンドは |automatic-setter-close_window| で設定さ
	れた "close_window_cmd" が使用されます。
	"close_window_cmd" が設定されていなければ |:close| が使用されます。

			*automatic#close_window_for_tag_from_current_tabpage()*
automatic#close_window_for_tag_from_current_tabpage({tag})
	{tag} が設定されているカレントのタブページのウィンドウをすべて閉じ
	ます。
	それ以外は |automatic#close_window_for_tag()| と同じです。


automatic#get_match_preset({name})		*automatic#get_match_preset()*
	|automatic.vim| が予め用意してある |automatic-config-match| を返しま
	す。
	これは次のように使用する事ができます。
Example: >
	" unite.vim が開かれた場合にマッチするコンフィグを返す
	let s:unite_match = automatic#get_match_preset("untie_opened")
	let g:automatic_config = [
	\	{
	\		'match' : s:unite_match
	\		'set' : {
	\			"height" : "40%",
	\		},
	\	},
	\]
<
						*automatic-preset*
	{name} には以下のものが設定できます。
	名前			マッチする条件~
	--------------		-------------------~
	unite_opened		|unite.vim| が開かれた時
	unite_split		|unite.vim| が |split| で開かれた時
	unite_no_split		|unite.vim| が |unite-options-no-split| で
				開かれた時
	helped			|:help| を行った後
	gui_enter		|GUIEnter|

	また、この設定は |g:automatic_match_presets| で拡張を行うことができま
	す。


=============================================================================
設定方法					*automatic-config*

|g:automatic_config| に "match" と "set" をキーを持つ辞書のリストを設定して
使用します。
"match" にはマッチする条件を、"set" にはセットする値を設定します。
これはリストの先頭から順に適用されていきます。
"match" の値をチェックするタイミングは指定がなければ |BufWinEnter| 時に行わ
れます。
チェックするタイミングは |automatic-matcher-autocmd| で指定することができま
す。
また、|BufWinEnter| よりも後でウィンドウの設定が変更されているケースも有りま
す。
（e.g. unite.vim は |BufWinEnter| よりも後でウィンドウサイズが変更されているた
め、ウィンドウのリサイズが正しく行われない場合があります。
この場合は正しく設定されない場合があるので注意してください。



Example: >
	" "match" でどのウィンドウに対する設定かを指定し、
	" "set" でその値を設定する
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"filetype" : "help",
	\			"buftype" : "help",
	\		},
	\		"set" : {
	\			"height" : 10,
	\			"move" : "bottom",
	\		},
	\	},
	\	{
	\		"match" : {
	\			"bufname" : '\[quickrun output\]',
	\		},
	\		"set" : {
	\			"height" : 5,
	\		}
	\	},
	\]
<

------------------------------------------------------------------------------
マッチ						*automatic-config-match*

"match" にはどの条件でマッチングを行うのかを設定します。
"match" には以下の値を設定することができます。
複数の条件が設定されている場合は、すべての条件にマッチした時に設定が実行されま
す。


名前			型		説明~
filetype		(文字列)	|'filetype'| の値と比較
buftype			(文字列)	|'buftype'| の値と比較
bufname			(文字列)	|bufname()| の値と比較
filename		(文字列)	バッファで開かれているファイル名を比較
autocmds		(リスト)	呼び出されたい |autocmd| のリスト
is_open_other_window	(数値)		1 が設定されていればタブページ内に他の
					ウィンドウが開かれている場合にマッチす
					る
matchlist		(リスト)	使用する |automatic-matcher| のリスト
set_once_in_window	(数値)		1 が設定されていればマッチしたウィンド
					ウでは1度しか "set" が行われない
expr			(文字列)	|eval()| で評価する
localtime_expr		(文字列)	現在の時間でチェックする
quickrun_latest_filetype(文字列)	最後に |:QuickRun| を行った |filetype|
preset			(文字列 or 辞書)プリセット
tag			(文字列 or 辞書)タグ


詳しくは |automatic-matcher| も参照してください。
また、"match" には文字列も設定することができます。
文字列が設定されている場合は、|automatic#get_match_preset()| から設定した文字
列参照されます。


------------------------------------------------------------------------------
セット						*automatic-config-set*

"set" には条件に一致した場合の設定方法を記述します。
"set" には以下の値を設定することができます。

名前			型		説明~
height			(任意)		ウィンドウの高さ（行数）
					または画面上の行数のパーセンテージ
width			(任意)		ウィンドの幅（桁数）
					または画面上の桁数のパーセンテージ
max_height		(数値)		ウィンドウの最大の高さ（行数）
min_height		(数値)		ウィンドウの最小の高さ（行数）
max_width		(数値)		ウィンドウの最大の幅（桁数）
min_width		(数値)		ウィンドウの最小の幅（桁数）
move			(文字列)	ウィンドウの位置
setlist			(リスト)	使用する |automatic-setter| のリスト
is_close_focus_out	(数値)		別のウィンドウへ移動した場合にウィンド
close_window_cmd	(文字列)	ウィンドウと閉じる際に使用するコマンド
unsetting		(数値)		マッチしたいずれかの "set" でこの
					値に1 が設定してある場合、すべての
					"set" が処理されない
unsettings		(リスト)	"unsetting" と同等の設定
					無効にしたい "set" を個別に設定
lines			(数値)		'lines' に設定される値
					または現在の'lines'のパーセンテージ
columns			(数値)		'columns' に設定される値
					または現在の'columns'のパーセンテージ
winpos_x		(数値)		GUIウィンドウの X 座標
winpos_y		(数値)		GUIウィンドウの Y 座標
tags			(リスト)	ウィンドウに対して任意のタグを設定


上記の値が適用される順番は決定していません。
明示的に適用される順番を指定したい場合は "setlist" を使用してください。

詳しくは |automatic-setter| も参照してください。


------------------------------------------------------------------------------
コンテキスト					*automatic-config-context*

処理が呼び出された時の情報を持つ辞書です。
|automatic-macher| や |automatic-setter| から参照されます。


名前			型		値~
filetype		(文字列)	'filetype'
buftype			(文字列)	'buftype'
bufname			(文字列)	|bufname()|
autocmd			(文字列)	呼び出された |autocmd| の値
filename		(文字列)	ファイルのフルパス
unite_sources		(リスト)	unite.vim の source 名
					リストの全てにマッチする
any_unite_sources	(リスト)	unite.vim の source 名
					リストのいずれかにマッチする
unite_bufname		(文字列)	unite.vim の |unite-options-buffer-name|


=============================================================================
マッチ方法					*automatic-matcher*

"match" に設定されている値を参照してマッチングを行います。
デフォルトでは以下のマッチ方法が使用されます。
また、デフォルト値がない名前はすべての場合にマッチします。


- "filetype"					*automatic-matcher-filetype*
  |'filetype'| の値と正規表現で比較します。

  名前		型		デフォルト値~
  filetype	(文字列)	""


- "buftype"					*automatic-matcher-buftype*
  |'buftype'| の値と正規表現で比較します。

  名前		型		デフォルト値~
  buftype	(文字列)	""


- "bufname"					*automatic-matcher-bufname*
  |bufname()| の値と正規表現で比較します。

  名前		型		デフォルト値~
  buftype	(文字列)	""


- "filename"					*automatic-matcher-filename*
  バッファのファイル名を比較を行います。
  バッファがファイルでなければ比較は行いません。

  名前		型		デフォルト値~
  filename	(文字列)	""


- "autocmd"					*automatic-matcher-autocmd*
  どの |atuocmd| から呼び出されたのかを設定します。
  デフォルトでは |BufWinEnter| 時にマッチします。

  名前		型		デフォルト値~
  autocmds	(リスト)	["BufWinEnter"]

  この変数には以下の値が設定出来ます。

  "BufWinEnter" : |BufWinEnter|
  "WinEnter"    : |WinEnter|
  "WinLeave"    : |WinLeave|
  "FileType"    : |FileType|
  "CmdwinEnter" : |CmdwinEnter|
  "CmdwinLeave" : |CmdwinLeave|
  "VimEnter"    : |VimEnter|
  "GUIEnter"    : |GUIEnter|

Example: >
	" "BufWinEnter" と "WinEnter" 時にマッチする定義
	let s:match = {
	\	"autocmds" : ["BufWinEnter", "WinEnter"]
	\}
<<


- "apply"					*automatic-matcher-apply*
  {config} と {context} を受け取る辞書関数 "apply" を呼び出します。
  {config} は現在の "match" の値が渡されます。
  {context} の値は |automatic-config-context| を参照してください。
  任意の判定を行いたい場合に使用します。

  名前		型		デフォルト値~
  apply		(関数参照)	なし
Example: >
	let s:match = {
	\	"match" : {},
	\}
	function! s:match.apply(config, context)
		" マッチすれば 1 を、そうでなければ 0 を返す
	endfunction
<

- "is_open_other_window"	*automatic-matcher-is_open_other_window*
  タブページ内にウィンドウが1つしか開かれていないかどうかを判定します。
  1 が設定されていれば他のウィンドウが開いている場合にマッチします。
  0 が設定されていれば他のウィンドウが開かれていない場合にマッチします。
  それ以外の場合は、全てにマッチします。

  名前			型	デフォルト値~
  is_open_other_window	(数値)	1


- "matchlist"					*automatic-matcher-matchlist*
  どのマッチ方法を使用するのかを設定します。
  また、このリストに設定された順番でマッチが呼び出されます。

  名前		型		デフォルト値~
  matchlist	(文字列)	すべての matcher
Example: >
	" "filetype" と "buftype" のみ使用される
	" "buftype" → "filetype" の順でチェックする
	" "autocmds" の設定は無視される
	let s:match = {
	\	"filetype" : "help",
	\	"buftype"  : "help",
	\	"autocmds"  : ["BufWinEnter", "BufEnter"],
	\	"matchlist"  : ["buftype", "filetype"]
	\}
<


- "unite_sources"			*automatic-matcher-unite_sources*
  起動した unite-source と比較を行います。
  複数の unite-source 全てにマッチしたい場合は unite_sources に
  いずれかの unite-source でマッチして欲しい場合は
  any_unite_sources にそれぞれ source 名のリストを設定します。

  名前			型		デフォルト値~
  unite_sources		(リスト)	なし
  any_unite_sources	(リスト)	なし
Example: >
	" file と file/new が含まれている unite.vim を起動した場合にマッチ
	" e.g. :Unite file file/new
	let s:match = {
	\	"bufname" : '[[*]unite[]*]',
	\	"unite_sources" : ['file', 'file/new'],
	}

	" file か directory が含まれている unite.vim を起動した場合にマッチ
	" e.g.
	" :Unite file directory
	" :Unite file
	" :Unite directory
	let s:match = {
	\	"bufname" : '[[*]unite[]*]',
	\	"any_unite_sources" : ['file', 'directory'],
	}
<


- "unite_bufname"			*automatic-matcher-unite_bufname*
  |unite-options-buffer-name| と正規表現で比較を行います。

  名前		型		デフォルト値~
  unite_bufname	(文字列)	""


- "set_once_in_window"			*automatic-matcher-set_once_in_window*
  1 が設定されていればウィンドウに対して1度しか "set" を行いません。
  デフォルトでマッチする |BufWinEnter| はウィンドウを開いた後に別のバッファを
  読み込んだ場合でも処理が行われます。
  これを回避したい場合は set_once_in_window に 1 を設定してください。

  名前			型		デフォルト値~
  set_once_in_window	(数値)		1


- "expr"				*automatic-matcher-expr*
  設定されている文字列を |eval()| で評価した値を使用します。

  名前			型		デフォルト値~
  expr			(文字列)	なし


- "tag"				*automatic-matcher-tag*
  |automatic-setter-tags| で設定したタグとの比較を行います。

  名前			型		デフォルト値~
  tag			(文字列)	なし


- "localtime"				*automatic-matcher-local*
  現在の時間でチェックを行います。
  localtime_expr には式を渡し、|eval()| でそれを評価します。

  名前			型		デフォルト値~
  localtime_expr	(文字列)	なし

  localtime_expr の式内では以下の変数が使用できます。
  
  "year"   : 西暦 (yyyy)
  "month"  : 月(01 ～ 12)
  "day"    : 月の日 (01～31)
  "hour"   : 24 時間制の時間 (00 ～ 23)
  "minute" : 月(01 ～ 12)
  "second" : 秒 (00 ～ 60)

Example: >
	" 8時から12時の間にマッチ
	let s:match = {
	\	"localtime_expr" : "8 <= hour && hour <= 12",
	\}

- "quickrun_latest_filetype"	*automatic-matcher-quickrun_latest_filetype*
  最後に |:QuickRun| を行った |filetype| でチェックを行います。

Example: >
	" filetype=vim で :QuickRun し、出力バッファが開かれた場合
	let s:match =  {
	\	"filetype" : "quickrun",
	\	"quickrun_latest_filetype" : "ruby",
	\}
<

- "preset"			*automatic-matcher-preset*
  "match" のデフォルトの値として使用します。
  設定できる値は |automatic-config-match| に設定できる値、もしくは
  |automatic#get_match_preset()| の {name} を渡すことができます。
  この設定は |g:automatic_default_match_config| よりも優先順位が高く、
  "match" に設定されている値よりも優先順位が低いです。
  "preset" は次のような場合に使用します。

Example: >
	" unite-file の場合にのみマッチする
	" "match_preset" で "unite" を設定し
	" 細かい設定を "match" で行う
	let g:automatic_config = [
	\	{
	\		'match' : {
	\			"preset" : "unite_opened",
	\			"unite_sources" : ["file"],
	\		},
	\		'set' : {
	\			"height" : "40%",
	\		},
	\	},
	\]
<




=============================================================================
セット方法					*automatic-setter*

"set" に設定されている値を参照して設定を行います。
デフォルトでは以下のセット方法が使用されます。

- "resize"					*automatic-setter-resize*
  ウィンドウのサイズを設定します。

  名前		型	説明~
  height	(任意)	ウィンドウの高さ（行数）
			または画面上の行数のパーセンテージ(文字列)
  width		(任意)	ウィンドウの幅（桁数）
			または画面上の桁数のパーセンテージ(文字列)
  max_height	(数値)	ウィンドウの最大の高さ（行数）
  min_height	(数値)	ウィンドウの最小の高さ（行数）
  max_width	(数値)	ウィンドウの最大の幅（桁数）
  min_width	(数値)	ウィンドウの最小の幅（桁数）

Example: >
	let s:set = {
	\	"set" : {
	\		"height" : 20,
	\	},
	\}

	" 高さが全体の20％の行数になるようにする
	" ただし、20行以上にはならない
	let s:set2 = {
	\	"set" : {
	\		"height" : "25%",
	\		"max_height" : 20,
	\	},
	\}
<


- "move"					*automatic-setter-move*
  ウィンドウの位置を設定します。

  名前		型		説明~
  move		(文字列)	ウィンドウの位置
  move には 以下の文字列が設定出来ます。
  "top"    : 一番上の位置
  "bottom" : 一番下の位置
  "right"  : 一番右の位置
  "left"   : 一番左の位置


- "apply"					*automatic-setter-apply*
  {config} と {context} を受け取る辞書関数 "apply" を呼び出します。
  {config} は現在の "set" の値が渡されます。
  {context} の値は |automatic-config-context| を参照してください。
  任意の処理を行いたい場合に使用します。
  名前		型		説明~
  apply		(関数参照)	{config} を受け取る辞書関数
Example: >
	let s:set = {
	\	"set" : {},
	\}
	function! s:set.apply(config, context)
		" 任意の処理
	endfunction



- "setlist"					*automatic-setter-setlist*
  どのセット方法を使用するのかを設定します。
  また、このリストに設定された順番に設定が適用されます。

  名前		型		説明~
  setlist	(リスト)	setter の名前のリスト
Example: >
	" ウィンドウと移動させた後にウィンドウのサイズを設定する
	let s:set = {
	\	"set" : {
	\		"height" : 20,
	\		"move" : "top",
	\		"setlist" : ["move", "resize"]
	\	},
	\}
<


- "close_window"				*automatic-setter-close_window*
  ウィンドウを閉じる処理を行います。

  名前			型		説明~
  close_window_cmd	(文字列)	ウィンドウを閉じる際に使
  					用するコマンドです。
  					デフォルト："close"
  is_close_focus_out	(数値)		1 が設定されていればその
  					ウィンドウから別のウィン
					ドウへと移動した際に元の
					ウィンドウを閉じます。


- "command"					*automatic-setter-command*
  コマンドの呼び出しを行います。

  名前		型		説明~
  commands	(リスト)	呼び出して欲しいコマンドを設定し
  				ます。リストの先頭から順番にコマ
				ンドを呼び出します。


- "gui_window"					*automatic-setter-gui_window*
  GUIウィンドウのサイズを設定します。

  名前		型		説明~
  lines		(数値)		'lines' に設定される値
				または現在の'lines'のパーセンテージ
  columns	(数値)		'columns' に設定される値
				または現在の'columns'のパーセンテージ
  winpos_x	(数値)		GUIウィンドウの X 座標
  winpos_y	(数値)		GUIウィンドウの Y 座標


- "tags"					*automatic-setter-tags*
  ウィンドウに対して任意のタグを設定します。
  ここで設定したタグは |automatic#close_window_for_tag()| 等で使用することがで
  きます。

  名前	型		説明~
  tags	(リスト)	任意のタグのリスト


=============================================================================
設定例						*automatic-example*


------------------------------------------------------------------------------
						*automatic-example-1*
:help 時のヘルプウィンドウの位置とサイズを設定する
>
	" ヘルプウィンドウを一番上へ移動し、高さを 20 にする
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"filetype" : "help",
	\			"buftype" : "help",
	\		},
	\		"set" : {
	\			"height" : 20,
	\			"move" : "top",
	\		},
	\	},
	\]

	" ヘルプウィンドウを一番下へ移動し、高さを画面全体の 40% のサイズにす
	" るにする
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"filetype" : "help",
	\			"buftype" : "help",
	\		},
	\		"set" : {
	\			"height" : "40%",
	\			"move" : "bottom",
	\		},
	\	},
	\]

<

------------------------------------------------------------------------------
						*automatic-example-2*
ヘルプウィンドウから移動した場合、ウィンドウを閉じる
>
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"filetype" : "help",
	\			"buftype" : "help",
	\		},
	\		"set" : {
	\			"is_close_focus_out" : 1,
	\		},
	\	},
	\]
<

------------------------------------------------------------------------------
ウィンドウの適用順を明示的に設定する		*automatic-example-3*
>
	" resize を行なってから move を行う
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"filetype" : "help",
	\			"buftype" : "help",
	\		},
	\		"set" : {
	\			"height" : 20,
	\			"move" : "bottom",
	\			"setlist" : ["resize", "move"]
	\		},
	\	},
	\]
<


------------------------------------------------------------------------------
すべての |BufWinEnter| 時に値をセットする	*automatic-example-4*
>
	" すべての match にマッチする
	let g:automatic_config = [
	\	{
	\		"match" : {
	\		},
	\		"set" : {
	\			"height" : 20
	\		},
	\	},
	\]
<

------------------------------------------------------------------------------
'buftype' が "help" 以外の場合に値をセットする	*automatic-example-5*
>
	" unsetting : 1 を設定することで
	" それにマッチした場合はセットが行われない
	let g:automatic_config = [
	\	{
	\		"match" : {
	\		},
	\		"set" : {
	\			"height" : 20
	\		},
	\	},
	\	{
	\		"match" : {
	\			"buftype" : "help"
	\		},
	\		"set" : {
	\			"unsetting" : 1
	\		},
	\	},
	\]
<


------------------------------------------------------------------------------
"set" のデフォルト値を設定する			*automatic-example-6*
>
	" マッチした場合にウィンドウの高さを 40 にする
	" g:automatic_config に設定されている値が優先されます
	let g:automatic_default_set_config = { "height" : 40 }
	
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"buftype" : 'help',
	\		},
	\	},
	\	{
	\		"match" : {
	\			"bufname" : '[[*]unite[]*]',
	\		},
	\	},
	\	{
	\		"match" : {
	\			"bufname" : '\[quickrun output\]',
	\		},
	\		"set" : {
	\			"height" : 20
	\		},
	\	},
	\]
<


------------------------------------------------------------------------------
Vim の起動後に GUIウィンドウのサイズを変更する	*automatic-example-7*
>
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"autocmds" : ["GUIEnter"],
	\			"is_open_other_window" : 0
	\		},
	\		"set" : {
	\			"lines" : 50,
	\			"columes" : 80,
	\		},
	\	},
	\]
<


------------------------------------------------------------------------------
Vim の起動後に GUIウィンドウの位置を変更する	*automatic-example-8*
>
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"autocmds" : ["GUIEnter"],
	\			"is_open_other_window" : 0
	\		},
	\		"set" : {
	\			"winpos_x" : 100,
	\			"winpos_y" : 50,
	\		},
	\	},
	\]
<


------------------------------------------------------------------------------
						*automatic-example-9*
unite.vim の |unite-options-buffer-name| で設定を切り替える
>
	" Unite -buffer-name=large

	" で起動した場合はウィンドウサイズを大きくし、
	" Unite -buffer-name=small
	" で起動した場合はウィンドウサイズを小さくする
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"preset" : "unite_opened",
	\			"unite_bufname" : 'large',
	\		},
	\		"set" : {
	\			"height" : "80%",
	\		}
	\	},
	\	{
	\		"match" : {
	\			"preset" : "unite_opened",
	\			"unite_bufname" : 'small',
	\		},
	\		"set" : {
	\			"height" : "20%",
	\		}
	\	},
	\]

<
------------------------------------------------------------------------------
特定の "set" のみを無効にする			*automatic-example-10*
>
	" デフォルトの設定
	let g:automatic_default_set_config = {
	\	"height" : "50%",
	\	"move"   : "bottom"
	\}
	
	
	" CmdWinEnter 時は "resize" と "move" を設定しない
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"buftype" : "help",
	\		},
	\	},
	\	{
	\		"match" : {
	\			"autocmds" : ["CmdwinEnter"],
	\		},
	\		"set" : {
	\			"unsettings" : ["resize", "move"]
	\		}
	\	},
	\]
<


------------------------------------------------------------------------------
ウィンドウに対して1度しか設定を行わない		*automatic-example-11*
例えば、ヘルプウィンドウに対して設定を行っている場合、別のヘルプファイルへ移動
した場合、その設定を行わないようにすることができます。

>
	" ヘルプウィンドウに対して 1回しか設定しない
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"buftype" : "help",
	\			"set_once_in_window" : 1
	\		},
	\		"set" : {
	\			"height" : "50%",
	\			"move"   : "bottom"
	\		}
	\	},
	\]
<



==============================================================================
FAQ						*automatic-FAQ*

Q. "filetype" : "unite" で設定が行われない。

A. unite.vim を起動した後に呼ばれる |BufWinEnter| 時にはまだ 'filetype' が設定
   されいません。
   これを回避する場合は "bufname" で判定を行うか、"autocmds" に ["FileType"]
   を設定して |FileType| 時に判定を行うようにする必要があります。


Q. unite.vim のウィンドウが変更されない

A. unite.vim は |BufWinEnter| 後に unite.vim 側でウィンドウが変更される為、
   ウィンドウのりサイズが行われない場合があります。
   ただし、既存の unite.vim のバッファが使用された場合はウィンドウサイズは
   "set" で設定したものに変更されます。
   それ以外の "set" は設定されます。
   この問題は次のようにして回避する事ができます。
>
	" automatic.vim で用意している preset を使用する
	let g:automatic_config = [
	\	{
	\		'match' : automatic#get_match_preset("untie_opened"),
	\		'set' : {
	\			"height" : "40%",
	\		},
	\	},
	\]
	
	" また、これは以下のように記述する事もできる
	let g:automatic_config = [
	\	{
	\		'match' : "untie_opened",
	\		'set' : {
	\			"height" : "40%",
	\		},
	\	},
	\]

<


Q. :help すると "set" が2回呼ばれるのを回避する

A. :help すると |BufWinEnter| が2回呼ばれます。これは "match" の "buftype" と
   "filetype" のそれぞれ両方 "help" を設定することで回避できます。
>
	let g:automatic_config = [
	\	{
	\		'match' : {
	\			"filetype" : "help",
	\			"buftype" : "help",
	\		},
	\		'set' : {
	\			"commands" : ["echom 'mamimami'"]
	\		},
	\	},
	\]
<


Q. "autocmds" : ["GUIEnter"] を設定しても "set" が反映されない

A. デフォルトではタブページ内にウィンドウが2つ以上の場合にのみマッチします。
   |GUIEnter| が呼ばれた時にはタブページ内にウィンドウが1つしかない可能性があ
   ります。
   その場合は次のように |automatic-matcher-is_open_other_window| を設定する事
   で回避する事ができます。
>
	" 起動時にウィンドウ位置やサイズを設定する
	let g:automatic_config = [
	\	{
	\		"match" : {
	\			"autocmds" : ["GUIEnter"],
	\			"is_open_other_window" : 0
	\		},
	\		"set" : {
	\			"lines" : 50,
	\			"columes" : 150,
	\			"winpos_x" : 100,
	\			"winpos_y" : 50,
	\		},
	\	},
	\]
<

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
